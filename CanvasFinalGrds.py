"""
Code for testing Canvas API, later incoporated for the calendar function of
the Tamogachi app
 - Need user to input their own access token, which can be created at the link
   <canvas_url>/profile/settings
 - Used "https://canvas.eee.uci.edu" url for testing, might implement other url
   soon
"""

# Utilized requests library for HTTP requests
import json
import requests

canvasURL = "https://canvas.eee.uci.edu"

def API_call(token, url="https://canvas.eee.uci.edu", requestURL = ""):
    """
    http request to the user's Canvas url,
    where Canvas requires authentication with OAuth2

    Parameter:
     - url: string for the Canvas url (ex: canvas.eee.uci.edu)
     - requestURL: the http request url for Canvas API
     - tkn: token from the user, has to be manually generated by them

    Output:
    returns a response object under the requests library
    """
    # Set up query string to send the OAuth2 token

    payload = {"access_token" : token}
    # Add params with the full URL
    fullURL = url + requestURL
    print(fullURL)
    response = requests.get(fullURL, params=payload)

    # reuturn the response object
    return response

# Use dictionary output from matchCourseNameID to match
# name of course and the final score
def finalGradesDict(tkn):
    """
    Parameter:
     - tkn: User Token

    Output: A dictionary where
     - Key:     course ID
     - Value:   final score for course (from 0 - 100 or have a value of None)
    """

    # Get user enrollment (to get final score for a course)
    requestEnrollment = "/api/v1/users/self/enrollments"
    enrollmentRespond = API_call(tkn, canvasURL, requestEnrollment)

    # Make sure the http response was successful
    if (enrollmentRespond.status_code != 200):
        return

    courseScores = {}
    # Get JSON string to a dictionary
    courseDict = json.loads(enrollmentRespond.text)


    for dictionary in courseDict:
        # Get course id:
        courseID = dictionary["course_id"]
        # Get final grade in grade dictioanry
        # - not all courses have a final grade, so just don't consider them
        gradesDict = dictionary["grades"]
        finalScore = gradesDict.get("final_score", None)
        # Add score to dictionary
        courseScores[courseID] = finalScore

    return courseScores


def matchCourseNameID(tkn):
    """
    Parameter:
     - tkn: User token

    Output: a dictionary with
    - key:   courseID
    - value: courseName
    """

    # Get courses from user, in order to match course name and course ids
    requestCourse = "/api/v1/courses/"
    courseRsp = API_call(tkn, canvasURL, requestCourse)

    # Make sure http response was successful
    if (courseRsp.status_code != 200):
        return

    idNameDictionary = {}
    # Get JSON string to a dictionary
    courseDict = json.loads(courseRsp.text)

    # Iterate through every course
    for course in courseDict:
        courseName = course["name"]
        courseID = course["id"]
        idNameDictionary[courseID] = courseName

    return idNameDictionary